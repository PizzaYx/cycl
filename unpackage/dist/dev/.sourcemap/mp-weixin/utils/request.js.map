{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["// utils/request.js\r\nconst BASE_URL = 'http://192.168.0.118:8089'\r\n\r\n// 存储刷新token的Promise，避免并发请求时重复刷新\r\nlet refreshingPromise = null\r\n\r\n// 请求拦截器\r\nuni.addInterceptor('request', {\r\n    invoke(args) {\r\n        // 添加基础URL\r\n        if (!args.url.startsWith('http')) {\r\n            args.url = BASE_URL + args.url\r\n        }\r\n\r\n        // 添加access token到请求头\r\n        const accessToken = uni.getStorageSync('access_token')\r\n        console.log('Access Token:', accessToken) // 调试输出\r\n\r\n        // 打印请求信息\r\n        console.log('【Request】', args.url, args.method || 'GET', args.data || {})\r\n\r\n        if (accessToken) {\r\n            args.header = args.header || {}\r\n            args.header['authorization'] = `Bearer ${accessToken}`\r\n        }\r\n\r\n        return args\r\n    },\r\n})\r\n\r\n// 响应拦截器\r\nuni.addInterceptor('request', {\r\n    success: async (res) => {\r\n        // 打印响应信息\r\n        console.log('【Response】', res.config?.url, res.statusCode, res.data)\r\n\r\n        if (res.statusCode === 200) {\r\n            // 处理401未授权\r\n            if (res.data.code === 401) {\r\n                try {\r\n                    await handleUnauthorized()\r\n                    // 刷新token后重新发起请求\r\n                    const newToken = uni.getStorageSync('access_token')\r\n                    if (newToken) {\r\n                        // 重新发起请求\r\n                        const originalRequest = res.config || {}\r\n                        originalRequest.header = originalRequest.header || {}\r\n                        originalRequest.header['authorization'] = `Bearer ${newToken}`\r\n\r\n                        return uni.request(originalRequest)\r\n                    } else {\r\n                        // 刷新失败，跳转登录，但不抛出异常\r\n                        logout()\r\n                        // 返回一个空的成功响应，避免错误日志\r\n                        return Promise.resolve({ data: { code: 401, msg: '登录已过期' } })\r\n                    }\r\n                } catch (error) {\r\n                    // 刷新失败，跳转登录，但不抛出异常\r\n                    console.log('Token刷新失败:', error.message)\r\n                    logout()\r\n                    // 返回一个空的成功响应，避免错误日志\r\n                    return Promise.resolve({ data: { code: 401, msg: '登录已过期' } })\r\n                }\r\n            }\r\n            if (res.data.code === 200) {\r\n                // 特殊处理：如果响应包含token信息，自动保存token（登录接口）\r\n                if (res.data.data && res.data.data.access_token && res.data.data.refresh_token) {\r\n                    saveToken(res.data.data)\r\n                }\r\n                return res.data\r\n            } else {\r\n                // 处理业务错误（如500等），仍然返回数据而不是undefined\r\n                return res.data\r\n            }\r\n        } else {\r\n            handleRequestError(res.data)\r\n            return Promise.reject(res.data)\r\n        }\r\n    },\r\n    fail: (err) => {\r\n        return Promise.reject(err)\r\n    },\r\n})\r\n\r\n// 简化的请求函数\r\nexport function request(config = {}) {\r\n    const { url, data = {}, method = 'GET', header = {}, ...rest } = config\r\n\r\n    return uni.request({\r\n        url,\r\n        data,\r\n        method,\r\n        header,\r\n        ...rest,\r\n    })\r\n}\r\n\r\n/**\r\n * 处理未授权情况\r\n */\r\nasync function handleUnauthorized() {\r\n    // 如果正在刷新token，则等待刷新完成\r\n    if (refreshingPromise) {\r\n        return refreshingPromise\r\n    }\r\n\r\n    try {\r\n        // 检查refresh token是否过期\r\n        console.log('未授权，正在处理...')\r\n        const refreshTokenStr = uni.getStorageSync('refresh_token')\r\n        const refreshExpireTime = uni.getStorageSync('refresh_expire_time')\r\n        console.log('检查refresh token:', refreshTokenStr ? '存在' : '不存在', refreshExpireTime)\r\n\r\n        if (!refreshTokenStr || !refreshExpireTime) {\r\n            // refresh token不存在，直接跳转登录\r\n            console.log('refresh token不存在，跳转登录')\r\n            logout()\r\n            // 不抛出异常，而是返回失败状态\r\n            return Promise.resolve(false)\r\n        }\r\n\r\n        // 检查refresh token是否过期\r\n        const now = Date.now()\r\n        if (now > refreshExpireTime) {\r\n            // refresh token过期，跳转登录\r\n            console.log('refresh token已过期，跳转登录')\r\n            logout()\r\n            // 不抛出异常，而是返回失败状态\r\n            return Promise.resolve(false)\r\n        }\r\n\r\n        // 刷新token\r\n        refreshingPromise = refreshAccessToken(refreshTokenStr)\r\n        const result = await refreshingPromise\r\n        return result\r\n    } catch (error) {\r\n        console.log('处理未授权异常:', error.message)\r\n        logout()\r\n        return Promise.resolve(false)\r\n    } finally {\r\n        // 清除刷新状态\r\n        refreshingPromise = null\r\n    }\r\n}\r\n\r\n/**\r\n * 刷新access token\r\n */\r\nasync function refreshAccessToken(refreshTokenStr) {\r\n    try {\r\n        const res = await post('/api/apiRefresh', {\r\n            refresh_token: refreshTokenStr,\r\n        })\r\n\r\n        if (res.code === 200) {\r\n            // 保存新的token信息\r\n            saveToken(res.data)\r\n            console.log('Token刷新成功')\r\n            return true\r\n        } else {\r\n            // 刷新失败，清除本地存储\r\n            console.log('Token刷新失败:', res.msg || '未知错误')\r\n            clearToken()\r\n            logout()\r\n            return false\r\n        }\r\n    } catch (error) {\r\n        // 网络错误等异常情况\r\n        console.log('Token刷新网络异常:', error.message || '未知错误')\r\n        clearToken()\r\n        logout()\r\n        return false\r\n    }\r\n}\r\n\r\n/**\r\n * 保存token信息\r\n */\r\nfunction saveToken(tokenData) {\r\n    const now = Date.now()\r\n\r\n    // 保存access token\r\n    uni.setStorageSync('access_token', tokenData.access_token)\r\n    uni.setStorageSync('access_expire_time', now + tokenData.access_expire_time * 1000)\r\n\r\n    // 保存refresh token\r\n    uni.setStorageSync('refresh_token', tokenData.refresh_token)\r\n    uni.setStorageSync('refresh_expire_time', now + tokenData.refresh_expire_time * 1000)\r\n}\r\n\r\n/**\r\n * 清除token信息\r\n */\r\nfunction clearToken() {\r\n    uni.removeStorageSync('access_token')\r\n    uni.removeStorageSync('access_expire_time')\r\n    uni.removeStorageSync('refresh_token')\r\n    uni.removeStorageSync('refresh_expire_time')\r\n}\r\n\r\n/**\r\n * 退出登录\r\n */\r\nfunction logout() {\r\n    clearToken()\r\n    // 跳转到登录页面\r\n    uni.redirectTo({\r\n        url: '/pages/index/index',\r\n    })\r\n}\r\n\r\n/**\r\n * 处理请求错误\r\n */\r\nfunction handleRequestError(data) {\r\n    if (data.msg) {\r\n        uni.showToast({\r\n            title: data.msg,\r\n            icon: 'none',\r\n        })\r\n    }\r\n}\r\n\r\n// 基础HTTP方法\r\nexport function get(url, data = {}, config = {}) {\r\n    return request({ url, data, method: 'GET', ...config })\r\n}\r\n\r\nexport function post(url, data = {}, config = {}) {\r\n    return request({ url, data, method: 'POST', ...config })\r\n}\r\n\r\nexport function put(url, data = {}, config = {}) {\r\n    return request({ url, data, method: 'PUT', ...config })\r\n}\r\n\r\nexport function del(url, data = {}, config = {}) {\r\n    return request({ url, data, method: 'DELETE', ...config })\r\n}\r\n\r\nexport default {\r\n    request,\r\n    get,\r\n    post,\r\n    put,\r\n    del,\r\n}\r\n"],"names":["uni"],"mappings":"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"}