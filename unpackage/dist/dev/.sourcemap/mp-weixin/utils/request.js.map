{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["// utils/request.js\r\nconst BASE_URL = 'http://192.168.0.118:8089'\r\n\r\n// 存储刷新token的Promise，避免并发请求时重复刷新\r\nlet refreshingPromise = null\r\n\r\n// 请求拦截器\r\nuni.addInterceptor('request', {\r\n    invoke(args) {\r\n        // 添加基础URL\r\n        if (!args.url.startsWith('http')) {\r\n            args.url = BASE_URL + args.url\r\n        }\r\n\r\n        // 添加access token到请求头\r\n        const accessToken = uni.getStorageSync('access_token')\r\n        console.log('Access Token:', accessToken); // 调试输出\r\n        if (accessToken) {\r\n            args.header = args.header || {}\r\n            args.header['authorization'] = `Bearer ${accessToken}`\r\n        }\r\n\r\n        return args\r\n    },\r\n})\r\n\r\n// 响应拦截器\r\nuni.addInterceptor('request', {\r\n    success: async (res) => {\r\n        // 处理401未授权\r\n        if (res.statusCode === 401) {\r\n            try {\r\n                await handleUnauthorized()\r\n                // 刷新token后重新发起请求\r\n                const newToken = uni.getStorageSync('access_token')\r\n                if (newToken) {\r\n                    // 重新发起请求\r\n                    const originalRequest = res.config || {}\r\n                    originalRequest.header = originalRequest.header || {}\r\n                    originalRequest.header['authorization'] = `Bearer ${newToken}`\r\n\r\n                    return uni.request(originalRequest)\r\n                } else {\r\n                    // 刷新失败，跳转登录\r\n                    logout()\r\n                    return Promise.reject(res)\r\n                }\r\n            } catch (error) {\r\n                // 刷新失败，跳转登录\r\n                logout()\r\n                return Promise.reject(res)\r\n            }\r\n        } else if (res.data.code === 200) {\r\n            // 特殊处理：如果响应包含token信息，自动保存token（登录接口）\r\n            if (\r\n                res.data.data &&\r\n                res.data.data.access_token &&\r\n                res.data.data.refresh_token\r\n            ) {\r\n                saveToken(res.data.data)\r\n            }\r\n            return res.data\r\n        } else {\r\n            handleRequestError(res.data)\r\n            return Promise.reject(res.data)\r\n        }\r\n    },\r\n    fail: (err) => {\r\n        return Promise.reject(err)\r\n    },\r\n})\r\n\r\n// 简化的请求函数\r\nexport function request(config = {}) {\r\n    const { url, data = {}, method = 'GET', header = {}, ...rest } = config\r\n\r\n    return uni.request({\r\n        url,\r\n        data,\r\n        method,\r\n        header,\r\n        ...rest,\r\n    })\r\n}\r\n\r\n/**\r\n * 处理未授权情况\r\n */\r\nasync function handleUnauthorized() {\r\n    // 如果正在刷新token，则等待刷新完成\r\n    if (refreshingPromise) {\r\n        return refreshingPromise\r\n    }\r\n\r\n    try {\r\n        // 检查refresh token是否过期\r\n        const refreshTokenStr = uni.getStorageSync('refresh_token')\r\n        const refreshExpireTime = uni.getStorageSync('refresh_expire_time')\r\n\r\n        if (!refreshTokenStr || !refreshExpireTime) {\r\n            // refresh token不存在，直接跳转登录\r\n            throw new Error('未登录')\r\n        }\r\n\r\n        // 检查refresh token是否过期\r\n        const now = Date.now()\r\n        if (now > refreshExpireTime) {\r\n            // refresh token过期，跳转登录\r\n            throw new Error('登录已过期')\r\n        }\r\n\r\n        // 刷新token\r\n        refreshingPromise = refreshAccessToken(refreshTokenStr)\r\n\r\n        await refreshingPromise\r\n    } finally {\r\n        // 清除刷新状态\r\n        refreshingPromise = null\r\n    }\r\n}\r\n\r\n/**\r\n * 刷新access token\r\n */\r\nasync function refreshAccessToken(refreshTokenStr) {\r\n    const res = await post('/api/apiRefresh', {\r\n        refresh_token: refreshTokenStr,\r\n    })\r\n\r\n    if (res.code === 200) {\r\n        // 保存新的token信息\r\n        saveToken(res.data)\r\n        return res\r\n    } else {\r\n        // 刷新失败，清除本地存储\r\n        clearToken()\r\n        throw new Error(res.msg || '刷新token失败')\r\n    }\r\n}\r\n\r\n/**\r\n * 保存token信息\r\n */\r\nfunction saveToken(tokenData) {\r\n    const now = Date.now()\r\n\r\n    // 保存access token\r\n    uni.setStorageSync('access_token', tokenData.access_token)\r\n    uni.setStorageSync('access_expire_time', now + tokenData.access_expire_time * 1000)\r\n\r\n    // 保存refresh token\r\n    uni.setStorageSync('refresh_token', tokenData.refresh_token)\r\n    uni.setStorageSync('refresh_expire_time', now + tokenData.refresh_expire_time * 1000)\r\n}\r\n\r\n/**\r\n * 清除token信息\r\n */\r\nfunction clearToken() {\r\n    uni.removeStorageSync('access_token')\r\n    uni.removeStorageSync('access_expire_time')\r\n    uni.removeStorageSync('refresh_token')\r\n    uni.removeStorageSync('refresh_expire_time')\r\n}\r\n\r\n/**\r\n * 退出登录\r\n */\r\nfunction logout() {\r\n    clearToken()\r\n    // 跳转到登录页面\r\n    uni.redirectTo({\r\n        url: '/pages/index/index',\r\n    })\r\n}\r\n\r\n/**\r\n * 处理请求错误\r\n */\r\nfunction handleRequestError(data) {\r\n    if (data.msg) {\r\n        uni.showToast({\r\n            title: data.msg,\r\n            icon: 'none',\r\n        })\r\n    }\r\n}\r\n\r\nexport default {\r\n    request\r\n}\r\n"],"names":["uni"],"mappings":"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"}