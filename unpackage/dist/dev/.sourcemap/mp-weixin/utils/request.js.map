{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["// utils/request.js\nconst BASE_URL = 'http://192.168.0.200:8080'\n\n// 存储刷新token的Promise，避免并发请求时重复刷新\nlet refreshingPromise = null\n\n// 请求拦截器\nuni.addInterceptor('request', {\n  invoke(args) {\n    // 添加基础URL\n    if (!args.url.startsWith('http')) {\n      args.url = BASE_URL + args.url\n    }\n\n    // 添加access token到请求头\n        const accessToken = uni.getStorageSync('access_token')\n        console.log('Access Token:', accessToken); // 调试输出\n    if (accessToken) {\n      args.header = args.header || {}\n      args.header['authorization'] = `Bearer ${accessToken}`\n    }\n\n    return args\n  },\n})\n\n// 响应拦截器\nuni.addInterceptor('request', {\n  success: async (res) => {\n    // 处理401未授权\n    if (res.statusCode === 401) {\n      try {\n        await handleUnauthorized()\n        // 刷新token后重新发起请求\n        const newToken = uni.getStorageSync('access_token')\n        if (newToken) {\n          // 重新发起请求\n          const originalRequest = res.config || {}\n          originalRequest.header = originalRequest.header || {}\n          originalRequest.header['authorization'] = `Bearer ${newToken}`\n\n          return uni.request(originalRequest)\n        } else {\n          // 刷新失败，跳转登录\n          logout()\n          return Promise.reject(res)\n        }\n      } catch (error) {\n        // 刷新失败，跳转登录\n        logout()\n        return Promise.reject(res)\n      }\n    } else if (res.data.code === 200) {\n      // 特殊处理：如果是登录接口，自动保存token\n      if (\n        res.config &&\n        res.config.url &&\n        res.config.url.includes('/api/apiLogin') &&\n        res.data.data &&\n        res.data.data.access_token\n      ) {\n\t\t  console.log(\"登录接口\");\n\t\t  console.log(res.data.data);\n        saveToken(res.data.data)\n      }\n      return res.data\n    } else {\n      handleRequestError(res.data)\n      return Promise.reject(res.data)\n    }\n  },\n  fail: (err) => {\n    return Promise.reject(err)\n  },\n})\n\n// 简化的请求函数\nexport function request(config = {}) {\n  const { url, data = {}, method = 'GET', header = {}, ...rest } = config\n\n  return uni.request({\n    url,\n    data,\n    method,\n    header,\n    ...rest,\n  })\n}\n\n/**\n * 处理未授权情况\n */\nasync function handleUnauthorized() {\n  // 如果正在刷新token，则等待刷新完成\n  if (refreshingPromise) {\n    return refreshingPromise\n  }\n\n  try {\n    // 检查refresh token是否过期\n    const refreshTokenStr = uni.getStorageSync('refresh_token')\n    const refreshExpireTime = uni.getStorageSync('refresh_expire_time')\n\n    if (!refreshTokenStr || !refreshExpireTime) {\n      // refresh token不存在，直接跳转登录\n      throw new Error('未登录')\n    }\n\n    // 检查refresh token是否过期\n    const now = Date.now()\n    if (now > refreshExpireTime) {\n      // refresh token过期，跳转登录\n      throw new Error('登录已过期')\n    }\n\n    // 刷新token\n    refreshingPromise = refreshAccessToken(refreshTokenStr)\n\n    await refreshingPromise\n  } finally {\n    // 清除刷新状态\n    refreshingPromise = null\n  }\n}\n\n/**\n * 刷新access token\n */\nasync function refreshAccessToken(refreshTokenStr) {\n  const res = await post('/api/apiRefresh', {\n    refresh_token: refreshTokenStr,\n  })\n\n  if (res.code === 200) {\n    // 保存新的token信息\n    saveToken(res.data)\n    return res\n  } else {\n    // 刷新失败，清除本地存储\n    clearToken()\n    throw new Error(res.msg || '刷新token失败')\n  }\n}\n\n/**\n * 保存token信息\n */\nfunction saveToken(tokenData) {\n  const now = Date.now()\n\n  // 保存access token\n  uni.setStorageSync('access_token', tokenData.access_token)\n  uni.setStorageSync('access_expire_time', now + tokenData.access_expire_time * 1000)\n\n  // 保存refresh token\n  uni.setStorageSync('refresh_token', tokenData.refresh_token)\n  uni.setStorageSync('refresh_expire_time', now + tokenData.refresh_expire_time * 1000)\n}\n\n/**\n * 清除token信息\n */\nfunction clearToken() {\n  uni.removeStorageSync('access_token')\n  uni.removeStorageSync('access_expire_time')\n  uni.removeStorageSync('refresh_token')\n  uni.removeStorageSync('refresh_expire_time')\n}\n\n/**\n * 退出登录\n */\nfunction logout() {\n  clearToken()\n  // 跳转到登录页面\n  uni.redirectTo({\n    url: '/pages/index/index',\n  })\n}\n\n/**\n * 处理请求错误\n */\nfunction handleRequestError(data) {\n  if (data.msg) {\n    uni.showToast({\n      title: data.msg,\n      icon: 'none',\n    })\n  }\n}\n\nexport default {\n  request\n}\n"],"names":["uni"],"mappings":"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"}