{"version":3,"file":"network.js","sources":["utils/network.js"],"sourcesContent":["// 网络状态检测工具\n\n/**\n * 检测网络状态\n * @returns {Promise<boolean>} 是否有网络连接\n */\nexport function checkNetworkStatus() {\n    return new Promise((resolve) => {\n        uni.getNetworkType({\n            success: (res) => {\n                console.log('网络类型:', res.networkType)\n                // none: 无网络, wifi: wifi网络, 2g: 2g网络, 3g: 3g网络, 4g: 4g网络, 5g: 5g网络\n                const hasNetwork = res.networkType !== 'none'\n                resolve(hasNetwork)\n            },\n            fail: () => {\n                console.log('获取网络状态失败')\n                resolve(false)\n            }\n        })\n    })\n}\n\n/**\n * 监听网络状态变化\n * @param {Function} callback 网络状态变化回调函数\n */\nexport function onNetworkStatusChange(callback) {\n    uni.onNetworkStatusChange((res) => {\n        console.log('网络状态变化:', res)\n        callback(res.isConnected, res.networkType)\n    })\n}\n\n/**\n * 显示网络错误提示\n * @param {string} message 错误信息\n */\nexport function showNetworkError(message = '网络连接失败，请检查网络设置') {\n    uni.showModal({\n        title: '网络错误',\n        content: message,\n        showCancel: true,\n        cancelText: '取消',\n        confirmText: '重试',\n        success: (res) => {\n            if (res.confirm) {\n                // 用户点击重试，可以在这里添加重试逻辑\n                console.log('用户选择重试')\n            }\n        }\n    })\n}\n\n/**\n * 带重试的网络请求\n * @param {Function} requestFn 请求函数\n * @param {number} maxRetries 最大重试次数\n * @param {number} retryDelay 重试延迟时间(毫秒)\n * @returns {Promise} 请求结果\n */\nexport async function requestWithRetry(requestFn, maxRetries = 3, retryDelay = 1000) {\n    let lastError = null\n\n    for (let i = 0; i <= maxRetries; i++) {\n        try {\n            // 检查网络状态\n            const hasNetwork = await checkNetworkStatus()\n            if (!hasNetwork) {\n                throw new Error('网络连接不可用')\n            }\n\n            const result = await requestFn()\n            return result\n        } catch (error) {\n            lastError = error\n            console.log(`请求失败，第${i + 1}次重试:`, error.message)\n\n            // 如果不是最后一次重试，等待后重试\n            if (i < maxRetries) {\n                await new Promise(resolve => setTimeout(resolve, retryDelay * (i + 1)))\n            }\n        }\n    }\n\n    // 所有重试都失败了\n    throw lastError\n}\n"],"names":["uni"],"mappings":";;AAMO,SAAS,qBAAqB;AACjC,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC5BA,kBAAAA,MAAI,eAAe;AAAA,MACf,SAAS,CAAC,QAAQ;AACdA,sBAAY,MAAA,MAAA,OAAA,0BAAA,SAAS,IAAI,WAAW;AAEpC,cAAM,aAAa,IAAI,gBAAgB;AACvC,gBAAQ,UAAU;AAAA,MACrB;AAAA,MACD,MAAM,MAAM;AACRA,sBAAAA,MAAA,MAAA,OAAA,0BAAY,UAAU;AACtB,gBAAQ,KAAK;AAAA,MAChB;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AAwCO,eAAe,iBAAiB,WAAW,aAAa,GAAG,aAAa,KAAM;AACjF,MAAI,YAAY;AAEhB,WAAS,IAAI,GAAG,KAAK,YAAY,KAAK;AAClC,QAAI;AAEA,YAAM,aAAa,MAAM,mBAAoB;AAC7C,UAAI,CAAC,YAAY;AACb,cAAM,IAAI,MAAM,SAAS;AAAA,MAC5B;AAED,YAAM,SAAS,MAAM,UAAW;AAChC,aAAO;AAAA,IACV,SAAQ,OAAO;AACZ,kBAAY;AACZA,oBAAAA,MAAY,MAAA,OAAA,0BAAA,SAAS,IAAI,CAAC,QAAQ,MAAM,OAAO;AAG/C,UAAI,IAAI,YAAY;AAChB,cAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,cAAc,IAAI,EAAE,CAAC;AAAA,MACzE;AAAA,IACJ;AAAA,EACJ;AAGD,QAAM;AACV;;;"}