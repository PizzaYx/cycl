{"version":3,"file":"upload.js","sources":["utils/upload.js"],"sourcesContent":["// utils/upload.js\nconst BASE_URL = 'http://192.168.0.118:8089'\n\n/**\n * 上传单个文件\n * @param {string} filePath - 文件路径\n * @param {object} options - 配置选项\n * @param {string} options.url - 上传接口地址，默认为 '/api/merchantapi/webupload'\n * @param {string} options.name - 文件对应的 key，默认为 'file'\n * @param {object} options.formData - 额外的表单数据\n * @param {object} options.header - 额外的请求头\n * @returns {Promise} 返回上传结果\n */\nexport function uploadFile(filePath, options = {}) {\n    const {\n        url = '/api/merchantapi/webupload',\n        name = 'file',\n        formData = {},\n        header = {}\n    } = options\n\n    console.log('准备上传文件:', filePath)\n\n    return new Promise((resolve, reject) => {\n        // 获取token\n        const accessToken = uni.getStorageSync('access_token')\n\n        // 构建完整URL\n        const fullUrl = url.startsWith('http') ? url : BASE_URL + url\n\n        // 合并请求头\n        const finalHeader = {\n            'authorization': accessToken ? `Bearer ${accessToken}` : '',\n            ...header\n        }\n\n        uni.uploadFile({\n            url: fullUrl,\n            filePath: filePath,\n            name: name,\n            formData: formData,\n            header: finalHeader,\n            success: (uploadFileRes) => {\n                console.log('文件上传成功 - 状态码:', uploadFileRes.statusCode)\n                console.log('文件上传成功 - 原始数据:', uploadFileRes.data)\n\n                try {\n                    // 解析返回的数据\n                    const result = JSON.parse(uploadFileRes.data)\n                    console.log('解析后的上传结果:', result)\n\n                    // 根据API返回结构来处理\n                    if (result.code === 200) {\n                        // 返回包含完整信息的对象，主要是url用于显示图片\n                        const uploadResult = {\n                            url: result.url,                    // 完整的图片URL，用于显示\n                            fileName: result.fileName,          // 服务器文件路径\n                            newFileName: result.newFileName,    // 新文件名\n                            originalFilename: result.originalFilename, // 原始文件名\n                            msg: result.msg\n                        }\n                        console.log('处理后的上传结果:', uploadResult)\n                        resolve(uploadResult)\n                    } else {\n                        console.error('上传API返回错误:', result)\n                        reject(new Error(result.msg || '上传失败'))\n                    }\n                } catch (parseError) {\n                    console.error('解析上传结果失败:', parseError)\n                    console.log('原始返回数据:', uploadFileRes.data)\n                    // 如果解析失败，直接返回原始数据\n                    resolve(uploadFileRes.data)\n                }\n            },\n            fail: (error) => {\n                console.error('文件上传失败:', error)\n                reject(error)\n            }\n        })\n    })\n}\n\n/**\n * 批量上传多个文件\n * @param {Array} filePaths - 文件路径数组\n * @param {object} options - 配置选项\n * @returns {Promise} 返回所有文件的上传结果数组\n */\nexport function uploadMultipleFiles(filePaths, options = {}) {\n    console.log('批量上传文件:', filePaths)\n\n    return Promise.all(\n        filePaths.map(filePath => uploadFile(filePath, options))\n    )\n}\n\n/**\n * 选择并上传图片（带进度提示）\n * @param {object} chooseOptions - 选择图片的配置\n * @param {number} chooseOptions.count - 最多可以选择的图片张数，默认9张\n * @param {Array} chooseOptions.sizeType - 所选的图片的尺寸，默认['compressed']\n * @param {Array} chooseOptions.sourceType - 选择图片的来源，默认['album', 'camera']\n * @param {object} uploadOptions - 上传配置选项\n * @param {Function} onProgress - 上传进度回调函数 (current, total, result) => {}\n * @returns {Promise} 返回上传结果数组\n */\nexport function chooseAndUploadImages(chooseOptions = {}, uploadOptions = {}, onProgress = null) {\n    const {\n        count = 9,\n        sizeType = ['compressed'],\n        sourceType = ['album', 'camera']\n    } = chooseOptions\n\n    return new Promise((resolve, reject) => {\n        uni.chooseImage({\n            count,\n            sizeType,\n            sourceType,\n            success: async (res) => {\n                const totalCount = res.tempFilePaths.length\n                const results = []\n                let currentIndex = 0\n\n                // 显示初始加载提示\n                uni.showLoading({\n                    title: `上传中 0/${totalCount}`\n                })\n\n                try {\n                    // 逐个上传图片，显示进度\n                    for (const filePath of res.tempFilePaths) {\n                        currentIndex++\n\n                        // 更新加载提示\n                        uni.showLoading({\n                            title: `上传中 ${currentIndex}/${totalCount}`\n                        })\n\n                        const uploadResult = await uploadFile(filePath, uploadOptions)\n                        results.push(uploadResult)\n\n                        // 调用进度回调\n                        if (onProgress && typeof onProgress === 'function') {\n                            onProgress(currentIndex, totalCount, uploadResult)\n                        }\n\n                        console.log(`图片上传进度: ${currentIndex}/${totalCount}`, uploadResult)\n                    }\n\n                    uni.hideLoading()\n                    console.log('所有图片上传完成:', results)\n                    resolve(results)\n                } catch (error) {\n                    uni.hideLoading()\n                    console.error('图片上传失败:', error)\n                    uni.showToast({\n                        title: `第${currentIndex}张图片上传失败`,\n                        icon: 'none'\n                    })\n                    reject(error)\n                }\n            },\n            fail: (error) => {\n                console.error('选择图片失败:', error)\n                reject(error)\n            }\n        })\n    })\n}\n\n/**\n * 上传图片到指定接口（商户认证专用）\n * @param {string} filePath - 文件路径\n * @returns {Promise} 返回上传结果\n */\nexport function uploadMerchantImage(filePath) {\n    return uploadFile(filePath, {\n        url: '/api/merchantapi/webupload',\n        name: 'file'\n    })\n}\n\n/**\n * 处理上传结果，提取需要的字段\n * @param {object} uploadResult - 上传API返回的结果\n * @returns {object} 处理后的结果对象\n */\nexport function processUploadResult(uploadResult) {\n    // 如果已经是处理过的结果对象，直接返回\n    if (uploadResult && uploadResult.url && uploadResult.fileName) {\n        return uploadResult\n    }\n\n    // 如果是原始字符串格式，尝试解析\n    if (typeof uploadResult === 'string') {\n        try {\n            const parsed = JSON.parse(uploadResult)\n            if (parsed.code === 200) {\n                return {\n                    url: parsed.url,\n                    fileName: parsed.fileName,\n                    newFileName: parsed.newFileName,\n                    originalFilename: parsed.originalFilename,\n                    msg: parsed.msg\n                }\n            }\n        } catch (error) {\n            console.error('解析上传结果失败:', error)\n        }\n    }\n\n    return uploadResult\n}\n\nexport default {\n    uploadFile,\n    uploadMultipleFiles,\n    chooseAndUploadImages,\n    uploadMerchantImage,\n    processUploadResult\n}\n"],"names":["uni"],"mappings":";;AACA,MAAM,WAAW;AAYV,SAAS,WAAW,UAAU,UAAU,IAAI;AAC/C,QAAM;AAAA,IACF,MAAM;AAAA,IACN,OAAO;AAAA,IACP,WAAW,CAAE;AAAA,IACb,SAAS,CAAE;AAAA,EACnB,IAAQ;AAEJA,gBAAAA,MAAA,MAAA,OAAA,yBAAY,WAAW,QAAQ;AAE/B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpC,UAAM,cAAcA,cAAAA,MAAI,eAAe,cAAc;AAGrD,UAAM,UAAU,IAAI,WAAW,MAAM,IAAI,MAAM,WAAW;AAG1D,UAAM,cAAc;AAAA,MAChB,iBAAiB,cAAc,UAAU,WAAW,KAAK;AAAA,MACzD,GAAG;AAAA,IACN;AAEDA,kBAAAA,MAAI,WAAW;AAAA,MACX,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,SAAS,CAAC,kBAAkB;AACxBA,sBAAA,MAAA,MAAA,OAAA,yBAAY,iBAAiB,cAAc,UAAU;AACrDA,sBAAY,MAAA,MAAA,OAAA,yBAAA,kBAAkB,cAAc,IAAI;AAEhD,YAAI;AAEA,gBAAM,SAAS,KAAK,MAAM,cAAc,IAAI;AAC5CA,wBAAAA,MAAY,MAAA,OAAA,yBAAA,aAAa,MAAM;AAG/B,cAAI,OAAO,SAAS,KAAK;AAErB,kBAAM,eAAe;AAAA,cACjB,KAAK,OAAO;AAAA;AAAA,cACZ,UAAU,OAAO;AAAA;AAAA,cACjB,aAAa,OAAO;AAAA;AAAA,cACpB,kBAAkB,OAAO;AAAA;AAAA,cACzB,KAAK,OAAO;AAAA,YACf;AACDA,0BAAAA,MAAA,MAAA,OAAA,yBAAY,aAAa,YAAY;AACrC,oBAAQ,YAAY;AAAA,UAC5C,OAA2B;AACHA,0BAAAA,MAAc,MAAA,SAAA,yBAAA,cAAc,MAAM;AAClC,mBAAO,IAAI,MAAM,OAAO,OAAO,MAAM,CAAC;AAAA,UACzC;AAAA,QACJ,SAAQ,YAAY;AACjBA,wBAAAA,MAAc,MAAA,SAAA,yBAAA,aAAa,UAAU;AACrCA,wBAAA,MAAA,MAAA,OAAA,yBAAY,WAAW,cAAc,IAAI;AAEzC,kBAAQ,cAAc,IAAI;AAAA,QAC7B;AAAA,MACJ;AAAA,MACD,MAAM,CAAC,UAAU;AACbA,sBAAAA,MAAA,MAAA,SAAA,yBAAc,WAAW,KAAK;AAC9B,eAAO,KAAK;AAAA,MACf;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AA+FO,SAAS,oBAAoB,UAAU;AAC1C,SAAO,WAAW,UAAU;AAAA,IACxB,KAAK;AAAA,IACL,MAAM;AAAA,EACd,CAAK;AACL;;"}