{"version":3,"file":"index.js","sources":["pages/index/index.vue","pages/index/index.vue?type=page"],"sourcesContent":["<template>\r\n    <!-- 主登录 -->\r\n    <view class=\"loginLayout\">\r\n        <view class=\"headImage\">\r\n            <image src=\"/static/headTopBg.png\" mode=\"aspectFill\"></image>\r\n        </view>\r\n        <view class=\"loginInfo\">\r\n            <view class=\"logo\">\r\n                <image src=\"/static/logo.png\" mode=\"aspectFill\"></image>\r\n            </view>\r\n            <view class=\"title\"> 厨余处理小程序 </view>\r\n            <view class=\"subtitle\"> 智能收运·绿色环保 </view>\r\n            <view class=\"chooseRow\">\r\n                <view class=\"tab-item\" :class=\"{ active: activeTab === 0 }\" @click=\"activeTab = 0\">\r\n                    商户端\r\n                    <view class=\"indicator\" v-if=\"activeTab === 0\"></view>\r\n                </view>\r\n                <view class=\"tab-item\" :class=\"{ active: activeTab === 1 }\" @click=\"activeTab = 1\">\r\n                    收运端\r\n                    <view class=\"indicator\" v-if=\"activeTab === 1\"></view>\r\n                </view>\r\n            </view>\r\n            <view class=\"inputInfo\">\r\n                <view class=\"zh\">账号</view>\r\n                <input class=\"account\" placeholder=\"请输入账号\" type=\"text\" placeholder-class=\"input-placeholder\"\r\n                    v-model=\"formData.account\" />\r\n                <view class=\"zh mm\">密码</view>\r\n                <view class=\"password-input-container\">\r\n                    <input class=\"account password\" placeholder=\"请输入密码\" :password=\"!passwordVisible\" type=\"text\"\r\n                        placeholder-class=\"input-placeholder\" v-model=\"formData.password\" />\r\n                    <uni-icons :type=\"passwordVisible ? 'eye' : 'eye-filled'\" size=\"20\" color=\"rgba(61, 61, 61, 0.5)\"\r\n                        class=\"password-toggle\" @tap=\"togglePasswordVisibility\">\r\n                    </uni-icons>\r\n                </view>\r\n                <!-- <text class=\"forgot-password\" @click=\"handleForgotPassword\" v-if=\"activeTab === 0\">忘记密码？</text> -->\r\n            </view>\r\n            <view class=\"loginBtn\">\r\n                <button type=\"button\" @click=\"handleLogin\">登录</button>\r\n            </view>\r\n            <view class=\"registerBtn\" v-if=\"activeTab === 0\">\r\n                <button type=\"button\" @click=\"handleRegister\">注册</button>\r\n            </view>\r\n        </view>\r\n        <view class=\" footer\">\r\n            <uni-icons :type=\"agreed ? 'circle-filled' : 'circle'\" size=\"22\"\r\n                :color=\"agreed ? 'rgba(7, 193, 96, 1)' : 'rgba(19, 19, 19, 0.5)'\" @click=\"toggleAgreement\">\r\n            </uni-icons>\r\n            <view class=\"agreement-text\">\r\n                <text class=\"normal-text\">我已阅读并同意</text>\r\n                <text class=\"link-text\" @click=\"openAgreement('user')\">《用户协议》</text>\r\n                <text class=\"normal-text\">和</text>\r\n                <text class=\"link-text\" @click=\"openAgreement('privacy')\">《隐私服务》</text>\r\n            </view>\r\n        </view>\r\n    </view>\r\n</template>\r\n\r\n<script setup>\r\nimport {\r\n    reactive,\r\n    ref,\r\n    onMounted\r\n} from 'vue'\r\n\r\nimport {\r\n    apiPostLogin,\r\n    apiGetInfo\r\n} from '@/api/apis.js'\r\nimport { useUserStore } from '@/stores/user.js'\r\n\r\n//商户端/收运端\r\nconst activeTab = ref(0)\r\n\r\n//是否同意\r\nconst agreed = ref(false)\r\n\r\n// 使用用户 store\r\nconst userStore = useUserStore()\r\n\r\n// 页面加载时检查缓存\r\n// onMounted(async () => {\r\n//     await checkLoginStatus()\r\n// })\r\n\r\n// 检查登录状态\r\n// const checkLoginStatus = async () => {\r\n//     try {\r\n//         // 检查是否有access_token\r\n//         const token = uni.getStorageSync('access_token')\r\n//         if (!token) {\r\n//             console.log('没有access_token，需要登录')\r\n//             return\r\n//         }\r\n\r\n//         console.log('检测到token，获取用户信息...')\r\n\r\n//         // 获取用户信息\r\n//         const userInfo = await userStore.fetchUserInfo()\r\n//         if (!userInfo) {\r\n//             console.log('获取用户信息失败，需要重新登录')\r\n//             return\r\n//         }\r\n\r\n//         // 根据用户类型跳转\r\n//         const userType = userInfo.type\r\n//         console.log('用户类型:', userType)\r\n\r\n//         if (userType === '1') {\r\n//             // 商户端\r\n//             console.log('跳转到商户端')\r\n//             uni.reLaunch({\r\n//                 url: '/pages/merchant/merchant'\r\n//             })\r\n//         } else if (userType === '2') {\r\n//             // 收运端\r\n//             console.log('跳转到收运端')\r\n//             uni.reLaunch({\r\n//                 url: '/pages/collection/collection'\r\n//             })\r\n//         } else {\r\n//             console.log('未知用户类型，需要重新登录')\r\n//         }\r\n//     } catch (error) {\r\n//         console.error('检查登录状态失败:', error)\r\n//     }\r\n// }\r\n\r\nconst toggleAgreement = () => {\r\n    agreed.value = !agreed.value\r\n}\r\n\r\n// 打开协议页面\r\nconst openAgreement = (type) => {\r\n    // 这里可以添加跳转到协议页面的逻辑\r\n    console.log('打开协议:', type)\r\n    if (type === 'user') {\r\n        uni.navigateTo({\r\n            url: '/pages/user/agreement'\r\n        })\r\n    }\r\n    else {\r\n        uni.navigateTo({\r\n            url: '/pages/user/privacyPolicy'\r\n        })\r\n    }\r\n\r\n}\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n    account: '',\r\n    password: '',\r\n})\r\n\r\n// 控制密码是否可见\r\nconst passwordVisible = ref(false)\r\n\r\n// 切换密码可见性\r\nconst togglePasswordVisibility = () => {\r\n    passwordVisible.value = !passwordVisible.value\r\n}\r\n\r\n//注册处理\r\nconst handleRegister = () => {\r\n    uni.navigateTo({\r\n        url: '/pages/user/register',\r\n    })\r\n}\r\n// 忘记密码处理\r\nconst handleForgotPassword = () => {\r\n    uni.showToast({\r\n        title: '忘记密码功能待实现',\r\n        icon: 'none',\r\n    })\r\n    // 这里可以添加跳转到忘记密码页面的逻辑\r\n    // 例如: uni.navigateTo({ url: '/pages/forgotPassword/forgotPassword' })\r\n}\r\n\r\n// 登录处理\r\nconst handleLogin = () => {\r\n    // 表单验证\r\n    if (!formData.account) {\r\n        uni.showToast({\r\n            title: '请输入账号',\r\n            icon: 'none',\r\n        })\r\n        return\r\n    }\r\n\r\n    // if (formData.account.length !== 11) {\r\n    // \tuni.showToast({\r\n    // \t\ttitle: '手机号码格式不正确',\r\n    // \t\ticon: 'none'\r\n    // \t});\r\n    // \treturn;\r\n    // }\r\n\r\n    // if (!formData.password) {\r\n    // \tuni.showToast({\r\n    // \t\ttitle: '请输入密码',\r\n    // \t\ticon: 'none'\r\n    // \t});\r\n    // \treturn;\r\n    // }\r\n\r\n    if (formData.password.length < 6) {\r\n        uni.showToast({\r\n            title: '密码长度不能少于6位',\r\n            icon: 'none',\r\n        })\r\n        return\r\n    }\r\n\r\n    if (!agreed.value) {\r\n        uni.showToast({\r\n            title: '请先同意用户协议和隐私服务',\r\n            icon: 'none',\r\n        })\r\n        return\r\n    }\r\n\r\n    // 调用登录接口\r\n    loginRequest()\r\n}\r\n\r\n// 登录请求\r\nconst loginRequest = async () => {\r\n    uni.showLoading({\r\n        title: '登录中...',\r\n    })\r\n\r\n    try {\r\n        // 使用封装好的API方法\r\n        const res = await apiPostLogin({\r\n            username: formData.account,\r\n            password: formData.password,\r\n        })\r\n\r\n        if (res.code === 200) {\r\n            // 先获取用户信息并验证类型\r\n            const userInfo = await fetchUserInfo()\r\n\r\n            // 如果用户类型不匹配，fetchUserInfo会显示提示并返回null\r\n            if (!userInfo) {\r\n                uni.hideLoading()\r\n                return // 直接返回，不继续执行登录成功逻辑\r\n            }\r\n\r\n            uni.hideLoading() // 隐藏loading\r\n            uni.showToast({\r\n                title: '登录成功',\r\n                icon: 'success',\r\n            })\r\n\r\n            // 延迟跳转确保toast显示\r\n            setTimeout(() => {\r\n                uni.reLaunch({\r\n                    url: activeTab.value ? '/pages/collection/collection' :\r\n                        '/pages/merchant/merchant',\r\n                })\r\n            }, 100)\r\n        } else {\r\n            uni.hideLoading() // 隐藏loading\r\n            uni.showToast({\r\n                title: res.msg || '登录失败',\r\n                icon: 'none',\r\n            })\r\n        }\r\n    } catch (err) {\r\n        uni.hideLoading() // 隐藏loading\r\n        uni.showToast({\r\n            title: '网络请求失败',\r\n            icon: 'none',\r\n        })\r\n        console.error('登录请求失败:', err)\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\n// 获取用户信息\r\nconst fetchUserInfo = async () => {\r\n    try {\r\n        const result = await userStore.fetchUserInfo(true) // 传入true获取用户类型\r\n        if (!result) {\r\n            throw new Error('获取用户信息失败')\r\n        }\r\n        const { userInfo, userType } = result\r\n        // 验证用户类型是否匹配选择的入口\r\n        const expectedType = activeTab.value === 0 ? '1' : '2' // 0=商户端(type=1), 1=收运端(type=2)\r\n        if (userType !== expectedType) {\r\n            const currentTypeText = activeTab.value === 0 ? '商户端' : '收运端'\r\n            const actualTypeText = userType === '1' ? '商户端' : '收运端'\r\n            // 使用Promise来处理异步弹窗\r\n            return new Promise((resolve) => {\r\n                uni.showModal({\r\n                    title: '用户类型不匹配',\r\n                    content: `您当前选择的是${currentTypeText}，但该账号是${actualTypeText}用户，请重新选择正确的入口`,\r\n                    showCancel: false,\r\n                    confirmText: '重新选择',\r\n                    success: () => {\r\n                        // 自动切换到正确的入口\r\n                        activeTab.value = userType === '1' ? 0 : 1\r\n                        console.log('切换后的activeTab:', activeTab.value)\r\n\r\n                        // 不自动登录，返回null让用户重新点击登录\r\n                        console.log('已切换到正确入口，请重新点击登录')\r\n                        resolve(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        return userInfo\r\n    } catch (error) {\r\n        // 如果是用户类型不匹配的错误，不显示通用错误提示\r\n        if (error.message === '用户类型不匹配') {\r\n            return null\r\n        }\r\n        return null\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.loginLayout {\r\n    position: relative;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n\r\n    .headImage {\r\n        position: absolute;\r\n        /* 绝对定位 */\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -1;\r\n        /* 置于其他元素下方 */\r\n        width: 100%;\r\n        height: 442rpx;\r\n        overflow: hidden;\r\n\r\n        /* 防止内容溢出 */\r\n        image {\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n    }\r\n\r\n    .loginInfo {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        flex-direction: column;\r\n        padding-top: 284rpx;\r\n        width: 100%;\r\n        flex: 1;\r\n\r\n        .logo {\r\n            width: 200rpx;\r\n            height: 200rpx;\r\n\r\n            image {\r\n                width: 100%;\r\n                height: 100%;\r\n            }\r\n        }\r\n\r\n        .title {\r\n            font-size: 48rpx;\r\n            font-weight: 600;\r\n            color: #131313;\r\n            padding-top: 55rpx;\r\n        }\r\n\r\n        .subtitle {\r\n            font-size: 28rpx;\r\n            color: #4b4b4b;\r\n            padding-top: 32rpx;\r\n        }\r\n\r\n        .chooseRow {\r\n            display: flex;\r\n            padding-top: 52rpx;\r\n\r\n            .tab-item {\r\n                color: rgba(19, 19, 19, 0.5); // 未选中灰色\r\n                font-size: 28rpx;\r\n                position: relative;\r\n                padding: 0 30rpx;\r\n\r\n                &.active {\r\n                    color: rgba(19, 19, 19, 1); // 选中黑色\r\n                }\r\n\r\n                .indicator {\r\n                    width: 68rpx;\r\n                    height: 16rpx;\r\n                    background: rgba(7, 193, 96, 0.2);\r\n                    border-radius: 100rpx;\r\n                    position: absolute;\r\n                    bottom: -5rpx;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                }\r\n            }\r\n\r\n            .tab-item:first-child {\r\n                margin-right: 108rpx; // 一半间距\r\n            }\r\n\r\n            .tab-item:last-child {\r\n                margin-left: 108rpx; // 一半间距\r\n            }\r\n        }\r\n\r\n        .inputInfo {\r\n            padding-top: 65rpx;\r\n            width: 100%;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n\r\n            .zh {\r\n                width: 608rpx; // 与input宽度一致\r\n                text-align: left; // 文本左对齐\r\n                font-size: 28rpx;\r\n                color: rgba(61, 61, 61, 1);\r\n                margin-bottom: 22rpx; // 与下方input保持间距\r\n                padding-left: 30rpx; // 与input的padding-left对齐\r\n\r\n                &.mm {\r\n                    margin-top: 22rpx;\r\n                }\r\n            }\r\n\r\n\r\n            .account {\r\n                width: 608rpx;\r\n                height: 80rpx;\r\n                background: #f4f4f4;\r\n                border-radius: 40rpx;\r\n                padding: 0 30rpx;\r\n                box-sizing: border-box;\r\n                font-size: 28rpx;\r\n                margin-bottom: 00rpx;\r\n\r\n                &:last-child {\r\n                    margin-bottom: 0;\r\n                }\r\n\r\n                &.password {\r\n                    margin-bottom: 0;\r\n                    padding-right: 70rpx; // 为眼睛图标留出空间，避免点击冲突\r\n                }\r\n            }\r\n\r\n            .password-input-container {\r\n                position: relative;\r\n                width: 608rpx;\r\n\r\n                .password-toggle {\r\n                    position: absolute;\r\n                    right: 25rpx;\r\n                    top: 50%;\r\n                    transform: translateY(-50%);\r\n                    z-index: 10;\r\n                    padding: 10rpx; // 增加点击区域\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n\r\n            .forgot-password {\r\n                width: 608rpx; // 与input宽度一致\r\n                text-align: right; // 右对齐\r\n                font-size: 24rpx;\r\n                color: rgba(61, 61, 61, 0.30);\r\n                margin-top: 10rpx; // 与上方元素保持间距\r\n                padding-right: 30rpx; // 与input的padding-right对齐\r\n            }\r\n\r\n\r\n            .input-placeholder {\r\n                // font-family: PingFang SC Regular, PingFang SC Regular;\r\n                font-weight: 400;\r\n                font-size: 24rpx;\r\n                color: rgba(61, 61, 61, 0.3);\r\n                line-height: 24rpx;\r\n                text-align: left;\r\n                font-style: normal;\r\n                text-transform: none;\r\n            }\r\n        }\r\n\r\n        .loginBtn {\r\n            padding-top: 66rpx;\r\n            width: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n\r\n            button {\r\n                width: 608rpx;\r\n                height: 80rpx;\r\n                background: #07c160;\r\n                border-radius: 40rpx;\r\n                border: none;\r\n                color: white;\r\n                font-size: 32rpx;\r\n                font-weight: 400;\r\n\r\n                &::after {\r\n                    border: none; // 去除button默认边框\r\n                }\r\n            }\r\n        }\r\n\r\n        .registerBtn {\r\n            padding-top: 30rpx;\r\n            width: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n\r\n            button {\r\n                width: 608rpx;\r\n                height: 80rpx;\r\n                background: rgba(7, 193, 96, 0.1); // 浅绿色背景\r\n                border-radius: 40rpx;\r\n                color: #07c160; // 绿色文字\r\n                font-size: 32rpx;\r\n                font-weight: 400;\r\n\r\n                &::after {\r\n                    border: none; // 去除button默认边框\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .footer {\r\n        flex-shrink: 0;\r\n        padding-bottom: calc(50rpx + env(safe-area-inset-bottom));\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 100%;\r\n\r\n        .agreement-text {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-left: 10rpx;\r\n\r\n            .normal-text {\r\n                font-size: 24rpx;\r\n                color: rgba(61, 61, 61, 0.5);\r\n                line-height: 36rpx;\r\n            }\r\n\r\n            .link-text {\r\n                font-size: 24rpx;\r\n                color: rgba(7, 193, 96, 1);\r\n                line-height: 36rpx;\r\n\r\n            }\r\n        }\r\n\r\n        ::v-deep .uni-icons {\r\n            flex-shrink: 0;\r\n        }\r\n    }\r\n\r\n}\r\n</style>","import MiniProgramPage from '/Users/yx/Documents/Vue3Projects/cycl/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["ref","useUserStore","uni","reactive","apiPostLogin"],"mappings":";;;;;;;;;;;;;;;;AAuEA,UAAM,YAAYA,cAAG,IAAC,CAAC;AAGvB,UAAM,SAASA,cAAG,IAAC,KAAK;AAGxB,UAAM,YAAYC,YAAAA,aAAc;AAkDhC,UAAM,kBAAkB,MAAM;AAC1B,aAAO,QAAQ,CAAC,OAAO;AAAA,IAC3B;AAGA,UAAM,gBAAgB,CAAC,SAAS;AAE5BC,oBAAAA,mDAAY,SAAS,IAAI;AACzB,UAAI,SAAS,QAAQ;AACjBA,sBAAAA,MAAI,WAAW;AAAA,UACX,KAAK;AAAA,QACjB,CAAS;AAAA,MACJ,OACI;AACDA,sBAAAA,MAAI,WAAW;AAAA,UACX,KAAK;AAAA,QACjB,CAAS;AAAA,MACJ;AAAA,IAEL;AAGA,UAAM,WAAWC,cAAAA,SAAS;AAAA,MACtB,SAAS;AAAA,MACT,UAAU;AAAA,IACd,CAAC;AAGD,UAAM,kBAAkBH,cAAG,IAAC,KAAK;AAGjC,UAAM,2BAA2B,MAAM;AACnC,sBAAgB,QAAQ,CAAC,gBAAgB;AAAA,IAC7C;AAGA,UAAM,iBAAiB,MAAM;AACzBE,oBAAAA,MAAI,WAAW;AAAA,QACX,KAAK;AAAA,MACb,CAAK;AAAA,IACL;AAYA,UAAM,cAAc,MAAM;AAEtB,UAAI,CAAC,SAAS,SAAS;AACnBA,sBAAAA,MAAI,UAAU;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,QAClB,CAAS;AACD;AAAA,MACH;AAkBD,UAAI,SAAS,SAAS,SAAS,GAAG;AAC9BA,sBAAAA,MAAI,UAAU;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,QAClB,CAAS;AACD;AAAA,MACH;AAED,UAAI,CAAC,OAAO,OAAO;AACfA,sBAAAA,MAAI,UAAU;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,QAClB,CAAS;AACD;AAAA,MACH;AAGD,mBAAc;AAAA,IAClB;AAGA,UAAM,eAAe,YAAY;AAC7BA,oBAAAA,MAAI,YAAY;AAAA,QACZ,OAAO;AAAA,MACf,CAAK;AAED,UAAI;AAEA,cAAM,MAAM,MAAME,sBAAa;AAAA,UAC3B,UAAU,SAAS;AAAA,UACnB,UAAU,SAAS;AAAA,QAC/B,CAAS;AAED,YAAI,IAAI,SAAS,KAAK;AAElB,gBAAM,WAAW,MAAM,cAAe;AAGtC,cAAI,CAAC,UAAU;AACXF,0BAAAA,MAAI,YAAa;AACjB;AAAA,UACH;AAEDA,wBAAAA,MAAI,YAAa;AACjBA,wBAAAA,MAAI,UAAU;AAAA,YACV,OAAO;AAAA,YACP,MAAM;AAAA,UACtB,CAAa;AAGD,qBAAW,MAAM;AACbA,0BAAAA,MAAI,SAAS;AAAA,cACT,KAAK,UAAU,QAAQ,iCACnB;AAAA,YACxB,CAAiB;AAAA,UACJ,GAAE,GAAG;AAAA,QAClB,OAAe;AACHA,wBAAAA,MAAI,YAAa;AACjBA,wBAAAA,MAAI,UAAU;AAAA,YACV,OAAO,IAAI,OAAO;AAAA,YAClB,MAAM;AAAA,UACtB,CAAa;AAAA,QACJ;AAAA,MACJ,SAAQ,KAAK;AACVA,sBAAAA,MAAI,YAAa;AACjBA,sBAAAA,MAAI,UAAU;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,QAClB,CAAS;AACDA,sBAAAA,MAAc,MAAA,SAAA,gCAAA,WAAW,GAAG;AAAA,MACpC,UAAc;AAAA,MAET;AAAA,IACL;AAGA,UAAM,gBAAgB,YAAY;AAC9B,UAAI;AACA,cAAM,SAAS,MAAM,UAAU,cAAc,IAAI;AACjD,YAAI,CAAC,QAAQ;AACT,gBAAM,IAAI,MAAM,UAAU;AAAA,QAC7B;AACD,cAAM,EAAE,UAAU,SAAQ,IAAK;AAE/B,cAAM,eAAe,UAAU,UAAU,IAAI,MAAM;AACnD,YAAI,aAAa,cAAc;AAC3B,gBAAM,kBAAkB,UAAU,UAAU,IAAI,QAAQ;AACxD,gBAAM,iBAAiB,aAAa,MAAM,QAAQ;AAElD,iBAAO,IAAI,QAAQ,CAAC,YAAY;AAC5BA,0BAAAA,MAAI,UAAU;AAAA,cACV,OAAO;AAAA,cACP,SAAS,UAAU,eAAe,SAAS,cAAc;AAAA,cACzD,YAAY;AAAA,cACZ,aAAa;AAAA,cACb,SAAS,MAAM;AAEX,0BAAU,QAAQ,aAAa,MAAM,IAAI;AACzCA,8BAAY,MAAA,MAAA,OAAA,gCAAA,kBAAkB,UAAU,KAAK;AAG7CA,8BAAAA,MAAA,MAAA,OAAA,gCAAY,kBAAkB;AAC9B,wBAAQ,IAAI;AAAA,cACf;AAAA,YACrB,CAAiB;AAAA,UACjB,CAAa;AAAA,QACJ;AACD,eAAO;AAAA,MACV,SAAQ,OAAO;AAEZ,YAAI,MAAM,YAAY,WAAW;AAC7B,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA,IACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/TA,GAAG,WAAW,eAAe;"}